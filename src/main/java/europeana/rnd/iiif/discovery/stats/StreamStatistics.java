package europeana.rnd.iiif.discovery.stats;

import java.time.Instant;
import java.util.List;

import europeana.rnd.iiif.discovery.model.Activity;
import europeana.rnd.iiif.discovery.model.ActivityType;
import europeana.rnd.iiif.discovery.model.UpdatedResource;

/**
 * Statistics and validation report generated by the StreamAnalyser
 *
 */
public class StreamStatistics {
	String streamUrl;
	Instant earliestTimestamp;
	Instant latestTimestamp;
	Instant latestRefreshTimestamp;
	MapOfInts<ActivityType> activitiesOnManifests = new MapOfInts<ActivityType>();
	MapOfInts<ActivityType> activitiesOnCollections = new MapOfInts<ActivityType>();
	MapOfInts<ActivityType> activitiesOnOtherTypes = new MapOfInts<ActivityType>();
	int validationErrorsOnPages = 0;
	int validationErrorsOnActivities = 0;
	int refreshCount = 0;

	/**
	 * @param streamUrl the URL of the stream that the statistics relate to
	 */
	public StreamStatistics(String streamUrl) {
		super();
		this.streamUrl = streamUrl;
	}

	/**
	 * Analyses the activity and adds it to the statistics
	 */
	public void add(Activity act) {
		earliestTimestamp = act.getSortingTimestamp();
		if (latestTimestamp == null)
			latestTimestamp = act.getSortingTimestamp();
		if (act.getTypeOfActivity() == ActivityType.Refresh && latestRefreshTimestamp == null)
			latestRefreshTimestamp = act.getSortingTimestamp();
		UpdatedResource object = act.getObject();
		if (object.getType().equals("Manifest"))
			activitiesOnManifests.incrementTo(act.getTypeOfActivity());
		else if (object.getType().equals("Collection"))
			activitiesOnCollections.incrementTo(act.getTypeOfActivity());
		else
			activitiesOnOtherTypes.incrementTo(act.getTypeOfActivity());
	}

	/**
	 * Called when a validation error was found on a as:OrderedCollectionPage
	 */
	public void incrementValidationErrorOnPage() {
		validationErrorsOnPages++;
	}

	/**
	 * Called when a validation error was found on a Activity
	 */
	public void incrementValidationErrorOnActivity() {
		validationErrorsOnActivities++;
	}

	/**
	 * writes the report to a human readable string
	 */
	public String printReport() {
		StringBuffer sb = new StringBuffer();
		sb.append("Statistics on the IIIF Change Discovery API stream at ").append(streamUrl).append("\n");
		sb.append(" - earliest timestamp: ").append(earliestTimestamp.toString()).append("\n");
		sb.append(" - latest timestamp: ").append(latestTimestamp.toString()).append("\n");
		if (latestRefreshTimestamp != null)
			sb.append(" - latest refresh: ").append(latestRefreshTimestamp.toString()).append("\n");
		sb.append(" - activities on IIIF manifests:").append("\n");
		if (activitiesOnManifests.isEmpty())
			sb.append("    - none").append("\n");
		else {
			List<ActivityType> types = activitiesOnManifests.getSortedKeysByInts();
			for (ActivityType type : types)
				sb.append("   - ").append(type).append(": ").append(activitiesOnManifests.get(type)).append("\n");
		}
		if (activitiesOnCollections.isEmpty())
			sb.append("    - none").append("\n");
		else {
			List<ActivityType> types = activitiesOnCollections.getSortedKeysByInts();
			sb.append(" - activities on IIIF collections:").append("\n");
			for (ActivityType type : types)
				sb.append("   - ").append(type).append(": ").append(activitiesOnCollections.get(type)).append("\n");
		}
		if (!activitiesOnOtherTypes.isEmpty()) {
			List<ActivityType> types = activitiesOnOtherTypes.getSortedKeysByInts();
			sb.append(" - activities on other types:").append("\n");
			for (ActivityType type : types)
				sb.append("   - ").append(type).append(": ").append(activitiesOnOtherTypes.get(type)).append("\n");
		}
		sb.append(" - validation errors on collection pages:").append(validationErrorsOnPages).append("\n");
		sb.append(" - validation errors on activities:").append(validationErrorsOnActivities).append("\n");
		return sb.toString();
	}
}
